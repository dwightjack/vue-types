import{_ as a,v as s}from"./chunks/framework.d07ab88e.js";const C=JSON.parse('{"title":"Namespaced Usage","description":"","frontmatter":{},"headers":[],"relativePath":"guide/namespaced.md","filePath":"guide/namespaced.md","lastUpdated":1687498426000}'),n={name:"guide/namespaced.md"},l=s.createStaticVNode(`<h1 id="namespaced-usage" tabindex="-1">Namespaced Usage <a class="header-anchor" href="#namespaced-usage" aria-label="Permalink to &quot;Namespaced Usage&quot;">​</a></h1><p>The default export of <code>vue-types</code> exposes an ES6 class object that mimics React prop-type.</p><p>The class object exposes both <a href="/vue-types/guide/validators.html#native-validators">native</a> and <a href="/vue-types/guide/validators.html#custom-validators">custom</a> validators.</p><h2 id="native-validators" tabindex="-1">Native Validators <a class="header-anchor" href="#native-validators" aria-label="Permalink to &quot;Native Validators&quot;">​</a></h2><p>Native validators are exposed as static getter factories:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> VueTypes </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isRequired</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>The main difference between namespaced native validators and those directly imported from the library is that the former come (usually) with a default value already defined.</p><div id="default-values"><table><thead><tr><th>Validator</th><th>Default</th><th><code>validate()</code> method</th></tr></thead><tbody><tr><td>any</td><td>-</td><td>yes</td></tr><tr><td>func</td><td><code>() =&gt; {}</code></td><td>yes</td></tr><tr><td>bool</td><td><code>true</code></td><td>yes</td></tr><tr><td>string</td><td><code>&#39;&#39;</code></td><td>yes</td></tr><tr><td>number</td><td><code>0</code></td><td>yes</td></tr><tr><td>array</td><td><code>[]</code></td><td>yes</td></tr><tr><td>integer</td><td><code>0</code></td><td>-</td></tr><tr><td>symbol</td><td>-</td><td>-</td></tr><tr><td>object</td><td><code>{}</code></td><td>yes</td></tr><tr><td>nullable</td><td>-</td><td>-</td></tr></tbody></table></div><p>Examples:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> numProp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">number</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// numProp === { type: Number, default : 0 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> numPropCustom </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">def</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// numPropCustom ===  { type: Number, default : 10 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> stringProp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">string</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// stringProp ===  { type: String, default : &#39;&#39; }</span></span></code></pre></div><h2 id="native-types-configuration" tabindex="-1">Native Types Configuration <a class="header-anchor" href="#native-types-configuration" aria-label="Permalink to &quot;Native Types Configuration&quot;">​</a></h2><p>All native validators (with the exception of <code>any</code> and <code>symbol</code>) come with a sensible default value. To customize or disable that value, you can set the global option <code>VueTypes.sensibleDefaults</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//use VueTypes built-in defaults (this is the &quot;default&quot; behavior)</span></span>
<span class="line"><span style="color:#A6ACCD;">VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sensibleDefaults </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//disable all sensible defaults.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Use .def(...) when you need a default value</span></span>
<span class="line"><span style="color:#A6ACCD;">VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sensibleDefaults </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//assign an object to specify custom defaults</span></span>
<span class="line"><span style="color:#A6ACCD;">VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sensibleDefaults </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the key must match the validator name</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mystringdefault</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Under the hood <code>VueTypes.sensibleDefaults</code> is a plain object implemented with custom getters/setters. That let&#39;s you play with it like you&#39;d do with every other object.</p><p>For example you can remove some of the default values using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals" target="_blank" rel="noreferrer">object rest spread</a> or <a href="https://lodash.com/docs/4.17.11#omit" target="_blank" rel="noreferrer">lodash.omit</a>.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bool</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// logs true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// copy every default value but boolean</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> bool</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">newDefaults </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sensibleDefaults</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// or, with lodash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const newDefaults = _.omit(VueTypes.sensibleDefaults, [&#39;bool&#39;])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sensibleDefaults </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> newDefaults</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bool</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default) </span><span style="color:#676E95;font-style:italic;">// logs undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default) </span><span style="color:#676E95;font-style:italic;">// logs &#39;&#39;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To unset the default value for an individual validator instance use <code>.def(undefined)</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">string</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { type: String, default: &#39;&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> type2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">def</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { type: String }</span></span></code></pre></div><p><strong>Note:</strong> Executing <code>.def(undefined)</code> on boolean or mixed-boolean types, explicitly sets the <code>default</code> property to <code>undefined</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">def</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { type: Boolean, default: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">def</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { type: Boolean, default: undefined }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> mixedType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">oneOfType</span><span style="color:#A6ACCD;">([String</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Boolean])</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { type: [Boolean, String] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">mixedType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">def</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { type: [Boolean, String], default: undefined }</span></span></code></pre></div></div><h2 id="custom-validators" tabindex="-1">Custom Validators <a class="header-anchor" href="#custom-validators" aria-label="Permalink to &quot;Custom Validators&quot;">​</a></h2><p>Custom validators are exposed as static methods. Refer to the <a href="/vue-types/guide/validators.html#custom-validators">dedicated documentation</a> for usage instructions.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arrayOfStrings </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arrayOf</span><span style="color:#A6ACCD;">(String)</span></span></code></pre></div><h2 id="utilities" tabindex="-1">Utilities <a class="header-anchor" href="#utilities" aria-label="Permalink to &quot;Utilities&quot;">​</a></h2><p>The class object exposes some utility functions under the <code>.utils</code> property:</p><h3 id="utils-validate-value-type" tabindex="-1">utils.validate(value, type) <a class="header-anchor" href="#utils-validate-value-type" aria-label="Permalink to &quot;utils.validate(value, type)&quot;">​</a></h3><p>Checks a value against a type definition:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">validate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">string) </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">validate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This utility won&#39;t check for <code>isRequired</code> flag, but will execute any provided custom validator function:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> isJohn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">validate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">validate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> isJohn) </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;">VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">validate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Jack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> isJohn) </span><span style="color:#676E95;font-style:italic;">//false</span></span></code></pre></div></div><h3 id="utils-totype-name-obj-validable-false" tabindex="-1">utils.toType(name, obj, validable = false) <a class="header-anchor" href="#utils-totype-name-obj-validable-false" aria-label="Permalink to &quot;utils.toType(name, obj, validable = false)&quot;">​</a></h3><p>Will convert a plain object to a VueTypes validator object with <code>.def()</code> and <code>isRequired</code> modifiers:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> minLength </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">validator</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> minLengthType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toType</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">minLength</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> minLength)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">username</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> minLengthType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isRequired</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>If the last argument is <code>true</code> the resulting validator object will support the <code>.validate()</code> method as well:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> password </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> passwordType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> VueTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">utils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toType</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> password</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// this password prop must include at least a digit</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">password</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> passwordType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">validate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">test</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">(v))</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,31),e=[l];function o(p,t,c,r,y,i){return s.openBlock(),s.createElementBlock("div",null,e)}const F=a(n,[["render",o]]);export{C as __pageData,F as default};
